# Generated by Django 3.0.11 on 2021-04-21 12:06

from django.db import migrations, models
import solid_backend.content.fields


def lowercase(apps, schema_editor):
    """
    Transform all values to start with lowercase letters.
    """

    trafo_func = lambda s: s[0].lower() + s[1:]
    Ware = apps.get_model("ais_content", "Ware")

    for obj in Ware.objects.all():
        obj.manufacture = trafo_func(obj.manufacture)
        obj.brand = trafo_func(obj.brand)
        obj.brand_atm = trafo_func(obj.brand_atm)
        obj.ornament = trafo_func(obj.ornament)
        obj.magerung_size = trafo_func(obj.magerung_size)
        obj.magerung_dist = trafo_func(obj.magerung_dist)
        obj.magerung_form = trafo_func(obj.magerung_form)

        if not (obj.magerungsart.startswith("Sch") or obj.magerungsart.startswith("W")):
            obj.magerungsart = trafo_func(obj.magerungsart)

        obj.save()


def uppercase(apps, schema_editor):
    """
    Transform all values to start with capital letters.
    """

    trafo_func = lambda s: s.capitalize()
    Ware = apps.get_model("ais_content", "Ware")

    for obj in Ware.objects.all():
        obj.manufacture = trafo_func(obj.manufacture)
        obj.brand = trafo_func(obj.brand)
        obj.brand_atm = trafo_func(obj.brand_atm)
        obj.ornament = trafo_func(obj.ornament)
        obj.magerung_size = trafo_func(obj.magerung_size)
        obj.magerung_dist = trafo_func(obj.magerung_dist)
        obj.magerung_form = trafo_func(obj.magerung_form)

        if not (obj.magerungsart.startswith("Sch") or obj.magerungsart.startswith("W")):
            obj.magerungsart = trafo_func(obj.magerungsart)

        obj.save()

class Migration(migrations.Migration):

    dependencies = [
        ('ais_content', '0008_auto_20210421_1342'),
    ]

    operations = [
        migrations.AlterField(
            model_name='ware',
            name='brand',
            field=models.CharField(choices=[('weich', 'weich'), ('mittel', 'mittel'), ('hart', 'hart'), ('klingend hart', 'klingend hart')], max_length=13, verbose_name='Brand'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='brand_atm',
            field=models.CharField(choices=[('reduzierender Brand', 'reduzierender Brand'), ('oxidierender Brand', 'oxidierender Brand'), ('kombinierte Verfahren', 'kombinierte Verfahren')], max_length=21, verbose_name='Brennatmosphäre'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='magerung_dist',
            field=models.CharField(choices=[('zufällig verteilt', 'zufällig verteilt'), ('gleichmäßig verteilt', 'gleichmäßig verteilt')], max_length=20, verbose_name='Magerungsverteilung'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='magerung_form',
            field=models.CharField(choices=[('rundlich', 'rundlich'), ('länglich', 'länglich'), ('muschelig', 'muschelig'), ('winkelig', 'winkelig')], max_length=9, verbose_name='Magerungsform'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='magerung_size',
            field=models.CharField(choices=[('sehr klein', 'sehr klein'), ('klein', 'klein'), ('mittel', 'mittel'), ('groß', 'groß'), ('sehr Groß', 'sehr Groß')], max_length=10, verbose_name='Magerungsgröße'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='magerungsart',
            field=models.CharField(choices=[('ungemagert', 'ungemagert'), ('vegetabil', 'vegetabil'), ('vegetabil mit mineralischem Beischlag', 'vegetabil mit mineralischem Beischlag'), ('vegetabil mit Schamott und mineralischem Beischlag', 'vegetabil mit Schamott und mineralischem Beischlag'), ('mineralisch', 'mineralisch'), ('mineralisch mit vegetabilem Beischlag', 'mineralisch mit vegetabilem Beischlag'), ('mineralisch mit Schamott und vegetabilem Beischlag', 'mineralisch mit Schamott und vegetabilem Beischlag'), ('Schamott', 'Schamott'), ('Schamott mit vegetabilem Beischlag', 'Schamott mit vegetabilem Beischlag'), ('Schamott mit mineralischem Beischlag', 'Schamott mit mineralischem Beischlag'), ('Schamott mit vegetabilem und mineralischem Beischlag', 'Schamott mit vegetabilem und mineralischem Beischlag'), ('komplexe Merkmalskombination', 'komplexe Merkmalskombination'), ('Weiteres ', 'Weiteres')], max_length=52, verbose_name='Magerungsart'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='manufacture',
            field=models.CharField(choices=[('freigeformt / Handgemacht', 'freigeformt / Handgemacht'), ('langsame Töpferscheibe', 'langsame Töpferscheibe'), ('scheibengedreht (Schnelle Töpferscheibe)', 'scheibengedreht (Schnelle Töpferscheibe)'), ('modelgeformt', 'modelgeformt'), ('kombinierte Technik', 'kombinierte Technik'), ('sonstiges', 'sonstiges')], max_length=40, verbose_name='Herstellungsart'),
        ),
        migrations.AlterField(
            model_name='ware',
            name='ornament',
            field=solid_backend.content.fields.ConcatCharField(blank=True, concat_choices=[((None, '---------'), ('kammstrichverziert', 'kammstrichverziert'), ('mit Applikation versehen (frei Hand)', 'mit Applikation versehen (frei Hand)'), ('mit Applikation versehen (aus der Model)', 'mit Applikation versehen (aus der Model)'), ('bemalt', 'bemalt'), ('glasiert', 'glasiert'), ('monochrom bemalt', 'monochrom bemalt'), ('polychrom bemalt', 'polychrom bemalt'), ('bichrom bemalt', 'bichrom bemalt'), ('Barbotine-Technik', 'Barbotine-Technik'), ('unverziert', 'unverziert'), ('modelgeformt ', 'modelgeformt'), ('Sonstiges', 'Sonstiges'), ('Komplexe Merkmalskombination', 'Komplexe Merkmalskombination')), ((None, '---------'), ('kammstrichverziert', 'kammstrichverziert'), ('mit Applikation versehen (frei Hand)', 'mit Applikation versehen (frei Hand)'), ('mit Applikation versehen (aus der Model)', 'mit Applikation versehen (aus der Model)'), ('bemalt', 'bemalt'), ('glasiert', 'glasiert'), ('monochrom bemalt', 'monochrom bemalt'), ('polychrom bemalt', 'polychrom bemalt'), ('bichrom bemalt', 'bichrom bemalt'), ('Barbotine-Technik', 'Barbotine-Technik'), ('unverziert', 'unverziert'), ('modelgeformt ', 'modelgeformt'), ('Sonstiges', 'Sonstiges'), ('Komplexe Merkmalskombination', 'Komplexe Merkmalskombination')), ((None, '---------'), ('kammstrichverziert', 'kammstrichverziert'), ('mit Applikation versehen (frei Hand)', 'mit Applikation versehen (frei Hand)'), ('mit Applikation versehen (aus der Model)', 'mit Applikation versehen (aus der Model)'), ('bemalt', 'bemalt'), ('glasiert', 'glasiert'), ('monochrom bemalt', 'monochrom bemalt'), ('polychrom bemalt', 'polychrom bemalt'), ('bichrom bemalt', 'bichrom bemalt'), ('Barbotine-Technik', 'Barbotine-Technik'), ('unverziert', 'unverziert'), ('modelgeformt ', 'modelgeformt'), ('Sonstiges', 'Sonstiges'), ('Komplexe Merkmalskombination', 'Komplexe Merkmalskombination'))], default='', max_length=200, seperators=[', ', ' und '], verbose_name='Verzierungsart'),
        ),
        migrations.RunPython(code=lowercase, reverse_code=uppercase)

    ]
